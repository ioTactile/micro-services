// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  name      String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
  comments  PostComment[]
  receivedReplies PostComment[] @relation("ReplyToUser")
}

model PostComment {
  id        String      @id @default(cuid())
  content   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  
  // Relations avec Post et User
  postId    String
  post      Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId  String
  author    User        @relation(fields: [authorId], references: [clerkId], onDelete: Cascade)
  
  // Gestion des commentaires imbriqués
  replyToId  String?
  replyTo    PostComment?    @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: Cascade)
  replies   PostComment[]   @relation("ReplyTo")

  // Ajout de la relation avec l'utilisateur qui répond
  replyToUserId  String?
  replyToUser    User?        @relation("ReplyToUser", fields: [replyToUserId], references: [clerkId], onDelete: Cascade)
  
  @@index([postId])
  @@index([authorId])
  @@index([replyToId])
  @@index([replyToUserId])
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  authorId  String
  author    User     @relation(fields: [authorId], references: [clerkId], onDelete: Cascade)
  comments  PostComment[]

  @@index([authorId])
}


